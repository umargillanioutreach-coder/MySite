<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Relax & Draw — Stress Relief Canvas</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary: #6d5dfc;
            --primary-light: #8a7dfc;
            --secondary: #43cea2;
            --accent: #ff6b6b;
            --dark: #2d3748;
            --light: #f7fafc;
            --gray: #a0aec0;
            --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --radius: 12px;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--dark);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            overflow-x: hidden;
        }

        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 1rem 2rem;
            box-shadow: var(--shadow);
            border-radius: 0 0 var(--radius) var(--radius);
            z-index: 100;
            position: relative;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        h1 {
            font-size: 2.2rem;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
            margin-bottom: 0.5rem;
        }

        .tagline {
            font-size: 1rem;
            color: var(--gray);
            font-weight: 500;
        }

        .nav-tabs {
            display: flex;
            gap: 0.5rem;
            background: rgba(255, 255, 255, 0.8);
            border-radius: var(--radius);
            padding: 0.5rem;
            box-shadow: var(--shadow);
        }

        .tab-btn {
            padding: 0.7rem 1.5rem;
            border: none;
            border-radius: var(--radius);
            background: transparent;
            color: var(--dark);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tab-btn:hover {
            background: rgba(109, 93, 252, 0.1);
        }

        .tab-btn.active {
            background: var(--primary);
            color: white;
        }

        .main-content {
            flex: 1;
            padding: 1.5rem;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .container {
            display: flex;
            gap: 1.5rem;
            width: 100%;
        }

        .tools-panel {
            background: rgba(255, 255, 255, 0.85);
            backdrop-filter: blur(10px);
            border-radius: var(--radius);
            padding: 1.5rem;
            box-shadow: var(--shadow);
            width: 320px;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
            transition: all 0.3s ease;
            max-height: 80vh;
            overflow-y: auto;
        }

        .tool-group {
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
        }

        .tool-group h3 {
            font-size: 1.1rem;
            color: var(--primary);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tool-group h3 i {
            font-size: 1rem;
        }

        .tool-btn {
            background: white;
            border: none;
            border-radius: var(--radius);
            padding: 0.8rem;
            display: flex;
            align-items: center;
            gap: 0.8rem;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            font-weight: 500;
        }

        .tool-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .tool-btn.active {
            background: var(--primary);
            color: white;
        }

        .tool-btn i {
            font-size: 1.2rem;
        }

        .color-picker {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .color-input {
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            overflow: hidden;
        }

        .color-input::-webkit-color-swatch {
            border: none;
            border-radius: 50%;
        }

        .slider-container {
            display: flex;
            align-items: center;
            gap: 0.8rem;
        }

        .slider {
            flex: 1;
            height: 6px;
            border-radius: 3px;
            background: #e2e8f0;
            outline: none;
            -webkit-appearance: none;
        }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary);
            cursor: pointer;
        }

        .canvas-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            position: relative;
            background: rgba(255, 255, 255, 0.7);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 1rem;
            min-height: 500px;
        }

        #drawing-canvas {
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            cursor: crosshair;
            touch-action: none;
            max-width: 100%;
            max-height: 70vh;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 1.5rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .action-btn {
            padding: 0.8rem 1.5rem;
            border: none;
            border-radius: var(--radius);
            background: white;
            color: var(--dark);
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.2s ease;
            box-shadow: var(--shadow);
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .action-btn.primary {
            background: var(--primary);
            color: white;
        }

        .action-btn.secondary {
            background: var(--secondary);
            color: white;
        }

        .action-btn.accent {
            background: var(--accent);
            color: white;
        }

        .shape-selector {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
        }

        .shape-btn {
            background: white;
            border: none;
            border-radius: var(--radius);
            padding: 0.8rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .shape-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .shape-btn.active {
            background: var(--primary);
            color: white;
        }

        .sticker-selector {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 0.5rem;
        }

        .sticker-btn {
            background: white;
            border: none;
            border-radius: var(--radius);
            padding: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 1.5rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .sticker-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .sticker-btn.active {
            background: var(--primary);
            color: white;
        }

        .text-controls {
            display: none;
            background: white;
            padding: 1rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            margin-top: 1rem;
            gap: 0.8rem;
            flex-wrap: wrap;
        }

        .text-controls.active {
            display: flex;
        }

        .text-input {
            flex: 1;
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: var(--radius);
            font-size: 1rem;
        }

        .font-size-select {
            padding: 0.5rem;
            border: 1px solid #e2e8f0;
            border-radius: var(--radius);
        }

        .sticker {
            position: absolute;
            font-size: 2rem;
            cursor: move;
            user-select: none;
            z-index: 10;
            pointer-events: all;
        }

        .sticker-cursor {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            z-index: 1000;
            display: none;
        }

        .quote-display {
            position: absolute;
            bottom: 1rem;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 255, 255, 0.8);
            padding: 0.5rem 1rem;
            border-radius: var(--radius);
            font-style: italic;
            color: var(--dark);
            text-align: center;
            max-width: 80%;
            font-size: 0.9rem;
            box-shadow: var(--shadow);
        }

        .music-control {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: white;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: var(--shadow);
            cursor: pointer;
            z-index: 100;
            transition: all 0.3s ease;
        }

        .music-control:hover {
            transform: scale(1.1);
        }

        .music-control i {
            font-size: 1.8rem;
            color: var(--primary);
        }

        .music-control.playing i {
            color: var(--secondary);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.1); }
            100% { transform: scale(1); }
        }

        .volume-container {
            position: absolute;
            bottom: 70px;
            right: 0;
            background: white;
            padding: 1rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 0.5rem;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
            width: 150px;
        }

        .music-control:hover .volume-container {
            opacity: 1;
            pointer-events: all;
        }

        .volume-slider {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: #e2e8f0;
            outline: none;
            -webkit-appearance: none;
        }

        .volume-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: var(--primary);
            cursor: pointer;
        }

        .ads-container {
            display: flex;
            justify-content: center;
            padding: 1rem;
            background: rgba(255, 255, 255, 0.7);
            margin: 1rem 0;
            border-radius: var(--radius);
            min-height: 90px;
        }

        .ad-placeholder {
            background: #f1f5f9;
            border: 2px dashed #cbd5e0;
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #94a3b8;
            font-weight: 500;
            width: 100%;
            max-width: 728px;
            height: 90px;
        }

        .ad-inline {
            background: #f1f5f9;
            border: 2px dashed #cbd5e0;
            border-radius: var(--radius);
            display: flex;
            align-items: center;
            justify-content: center;
            color: #94a3b8;
            font-weight: 500;
            width: 100%;
            height: 250px;
            margin: 1.5rem 0;
        }

        .info-page {
            background: white;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .info-page h2 {
            color: var(--primary);
            margin-bottom: 1.5rem;
            border-bottom: 2px solid var(--primary-light);
            padding-bottom: 0.5rem;
        }

        .info-page h3 {
            color: var(--secondary);
            margin: 1.5rem 0 1rem 0;
        }

        .info-page p {
            line-height: 1.6;
            margin-bottom: 1rem;
        }

        .info-page ul, .info-page ol {
            margin-left: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .info-page li {
            margin-bottom: 0.5rem;
            line-height: 1.5;
        }

        .contact-form {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            max-width: 600px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .form-group label {
            font-weight: 600;
            color: var(--dark);
        }

        .form-group input, .form-group textarea {
            padding: 0.8rem;
            border: 1px solid #e2e8f0;
            border-radius: var(--radius);
            font-size: 1rem;
            transition: border-color 0.3s ease;
        }

        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: var(--primary);
        }

        .submit-btn {
            align-self: flex-start;
            padding: 0.8rem 2rem;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: var(--radius);
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .submit-btn:hover {
            background: var(--primary-light);
            transform: translateY(-2px);
        }

        footer {
            background: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            text-align: center;
            color: var(--gray);
            font-size: 0.9rem;
            margin-top: auto;
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: var(--primary);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            z-index: 1000;
            transform: translateX(150%);
            transition: transform 0.3s ease;
        }

        .notification.show {
            transform: translateX(0);
        }

        @media (max-width: 1024px) {
            .container {
                flex-direction: column;
            }
            
            .tools-panel {
                width: 100%;
                max-height: 300px;
                overflow-y: auto;
            }
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 1.8rem;
            }
            
            .header-content {
                flex-direction: column;
                gap: 1rem;
            }
            
            .nav-tabs {
                width: 100%;
                justify-content: center;
            }
            
            .tab-btn {
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .main-content {
                padding: 1rem;
            }
            
            .info-page {
                padding: 1.5rem;
            }
            
            .ad-placeholder {
                height: 100px;
            }
            
            .ad-inline {
                height: 200px;
            }
            
            .music-control {
                bottom: 1rem;
                right: 1rem;
                width: 50px;
                height: 50px;
            }
            
            .music-control i {
                font-size: 1.5rem;
            }
        }

        @media (max-width: 480px) {
            .nav-tabs {
                flex-wrap: wrap;
            }
            
            .tab-btn {
                flex: 1;
                min-width: 120px;
                justify-content: center;
            }
            
            .action-buttons {
                flex-direction: column;
                width: 100%;
            }
            
            .action-btn {
                width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="header-content">
            <div class="logo-section">
                <h1>Relax & Draw</h1>
                <p class="tagline">Stress Relief Canvas</p>
            </div>
            <nav class="nav-tabs">
                <button class="tab-btn active" data-tab="drawing">
                    <i class="fas fa-paint-brush"></i> Drawing
                </button>
                <button class="tab-btn" data-tab="about">
                    <i class="fas fa-info-circle"></i> About
                </button>
                <button class="tab-btn" data-tab="privacy">
                    <i class="fas fa-shield-alt"></i> Privacy
                </button>
                <button class="tab-btn" data-tab="contact">
                    <i class="fas fa-envelope"></i> Contact
                </button>
            </nav>
        </div>
    </header>

    <div class="main-content">
        <!-- Drawing Tab -->
        <div id="drawing-tab" class="tab-content active">
            <div class="ads-container">
                <div class="ad-placeholder">Advertisement Banner (728x90)</div>
            </div>
            
            <div class="container">
                <div class="tools-panel" id="tools-panel">
                    <div class="tool-group">
                        <h3><i class="fas fa-paint-brush"></i> Drawing Tools</h3>
                        <button class="tool-btn active" id="brush-tool" data-tooltip="Brush">
                            <i class="fas fa-paint-brush"></i> Brush
                        </button>
                        <button class="tool-btn" id="eraser-tool" data-tooltip="Eraser">
                            <i class="fas fa-eraser"></i> Eraser
                        </button>
                        <button class="tool-btn" id="spray-tool" data-tooltip="Spray">
                            <i class="fas fa-spray-can"></i> Spray
                        </button>
                        <button class="tool-btn" id="fill-tool" data-tooltip="Fill Area">
                            <i class="fas fa-fill-drip"></i> Fill
                        </button>
                    </div>

                    <div class="tool-group">
                        <h3><i class="fas fa-shapes"></i> Shapes & Objects</h3>
                        <button class="tool-btn" id="shape-tool" data-tooltip="Shapes">
                            <i class="fas fa-shapes"></i> Shapes
                        </button>
                        
                        <div class="shape-selector">
                            <button class="shape-btn" data-shape="line" data-tooltip="Line">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button class="shape-btn" data-shape="rect" data-tooltip="Rectangle">
                                <i class="fas fa-square"></i>
                            </button>
                            <button class="shape-btn" data-shape="circle" data-tooltip="Circle">
                                <i class="fas fa-circle"></i>
                            </button>
                            <button class="shape-btn" data-shape="triangle" data-tooltip="Triangle">
                                <i class="fas fa-play"></i>
                            </button>
                            <button class="shape-btn" data-shape="star" data-tooltip="Star">
                                <i class="fas fa-star"></i>
                            </button>
                            <button class="shape-btn" data-shape="heart" data-tooltip="Heart">
                                <i class="fas fa-heart"></i>
                            </button>
                        </div>
                        
                        <button class="tool-btn" id="text-tool" data-tooltip="Text">
                            <i class="fas fa-font"></i> Text
                        </button>
                        
                        <div class="text-controls" id="text-controls">
                            <input type="text" class="text-input" id="text-input" placeholder="Type your text here">
                            <select class="font-size-select" id="font-size">
                                <option value="16">Small</option>
                                <option value="24" selected>Medium</option>
                                <option value="32">Large</option>
                                <option value="48">X-Large</option>
                            </select>
                            <button class="action-btn" id="add-text-btn">Add Text</button>
                        </div>
                    </div>

                    <div class="tool-group">
                        <h3><i class="fas fa-palette"></i> Colors</h3>
                        <div class="color-picker">
                            <input type="color" id="primary-color" class="color-input" value="#6d5dfc">
                            <span>Primary Color</span>
                        </div>
                        <div class="color-picker">
                            <input type="color" id="secondary-color" class="color-input" value="#43cea2">
                            <span>Background</span>
                        </div>
                        <div class="color-picker">
                            <input type="color" id="stroke-color" class="color-input" value="#2d3748">
                            <span>Stroke Color</span>
                        </div>
                        
                        <button class="tool-btn" id="picker-tool" data-tooltip="Color Picker">
                            <i class="fas fa-eye-dropper"></i> Color Picker
                        </button>
                    </div>

                    <div class="tool-group">
                        <h3><i class="fas fa-sliders-h"></i> Brush Settings</h3>
                        <div class="slider-container">
                            <i class="fas fa-circle" style="font-size: 0.8rem;"></i>
                            <input type="range" min="1" max="80" value="5" class="slider" id="brush-size">
                            <i class="fas fa-circle" style="font-size: 1.5rem;"></i>
                        </div>
                        <span id="brush-size-value">5px</span>
                        
                        <div class="slider-container">
                            <i class="fas fa-water" style="font-size: 0.8rem;"></i>
                            <input type="range" min="1" max="100" value="100" class="slider" id="opacity">
                            <i class="fas fa-water" style="font-size: 1.5rem;"></i>
                        </div>
                        <span id="opacity-value">100%</span>
                    </div>

                    <div class="tool-group">
                        <h3><i class="fas fa-smile"></i> Stickers</h3>
                        <div class="sticker-selector">
                            <button class="sticker-btn" data-sticker="😊">😊</button>
                            <button class="sticker-btn" data-sticker="⭐">⭐</button>
                            <button class="sticker-btn" data-sticker="❤️">❤️</button>
                            <button class="sticker-btn" data-sticker="🌸">🌸</button>
                            <button class="sticker-btn" data-sticker="🎨">🎨</button>
                            <button class="sticker-btn" data-sticker="🌈">🌈</button>
                            <button class="sticker-btn" data-sticker="✨">✨</button>
                            <button class="sticker-btn" data-sticker="🎵">🎵</button>
                        </div>
                        <div id="sticker-status" style="font-size: 0.9rem; color: var(--primary); margin-top: 0.5rem; display: none;">
                            <i class="fas fa-mouse-pointer"></i> Click on canvas to place sticker
                        </div>
                    </div>
                </div>

                <div class="canvas-container">
                    <canvas id="drawing-canvas" width="800" height="600"></canvas>
                    <div class="sticker-cursor" id="sticker-cursor"></div>
                    <div class="action-buttons">
                        <button class="action-btn" id="undo-btn" data-tooltip="Undo">
                            <i class="fas fa-undo"></i> Undo
                        </button>
                        <button class="action-btn" id="redo-btn" data-tooltip="Redo">
                            <i class="fas fa-redo"></i> Redo
                        </button>
                        <button class="action-btn secondary" id="clear-btn" data-tooltip="Clear Canvas">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                        <button class="action-btn primary" id="download-btn" data-tooltip="Download Image">
                            <i class="fas fa-download"></i> Download
                        </button>
                        <button class="action-btn" id="upload-btn" data-tooltip="Upload Image">
                            <i class="fas fa-upload"></i> Upload
                        </button>
                        <button class="action-btn accent" id="save-btn" data-tooltip="Save to Gallery">
                            <i class="fas fa-save"></i> Save
                        </button>
                        <button class="action-btn" id="load-btn" data-tooltip="Load Drawing">
                            <i class="fas fa-folder-open"></i> Load
                        </button>
                        <input type="file" id="image-upload" accept="image/*" style="display: none;">
                    </div>
                    <div class="quote-display" id="quote-display">
                        "Creativity takes courage." - Henri Matisse
                    </div>
                </div>
            </div>
            
            <div class="ads-container">
                <div class="ad-placeholder">Advertisement Banner (728x90)</div>
            </div>
        </div>

        <!-- About Us Tab -->
        <div id="about-tab" class="tab-content">
            <div class="info-page">
                <h2>About Relax & Draw</h2>
                <p>Welcome to Relax & Draw, your ultimate digital canvas for creative expression and stress relief. Our application is designed to provide a soothing, intuitive drawing experience for artists of all skill levels.</p>
                
                <h3>Our Mission</h3>
                <p>We believe that artistic expression is a powerful tool for relaxation, mindfulness, and personal growth. Our mission is to make digital art creation accessible, enjoyable, and therapeutic for everyone.</p>
                
                <h3>Features</h3>
                <ul>
                    <li>Comprehensive drawing tools for all your creative needs</li>
                    <li>Soothing background music to enhance your creative flow</li>
                    <li>Responsive design that works perfectly on all devices</li>
                    <li>Regular updates with new features and improvements</li>
                    <li>Completely free to use with no hidden costs</li>
                </ul>
                
                <h3>Our Team</h3>
                <p>Relax & Draw is developed by a passionate team of artists, developers, and designers who believe in the therapeutic power of creativity. We're committed to continuously improving your drawing experience.</p>
            </div>
            
            <div class="ad-inline">
                Advertisement (300x250)
            </div>
        </div>

        <!-- Privacy Policy Tab -->
        <div id="privacy-tab" class="tab-content">
            <div class="info-page">
                <h2>Privacy Policy</h2>
                <p>Last updated: December 2023</p>
                
                <h3>Information We Collect</h3>
                <p>Relax & Draw is committed to protecting your privacy. Our application:</p>
                <ul>
                    <li>Does not collect any personal identification information</li>
                    <li>Stores your drawings locally on your device only</li>
                    <li>Uses cookies only for essential functionality</li>
                    <li>Does not share any data with third parties</li>
                </ul>
                
                <h3>Data Storage</h3>
                <p>Your drawings are stored locally in your browser's storage. This data remains on your device and is not transmitted to our servers. You can clear this data at any time by clearing your browser cache.</p>
                
                <h3>Third-Party Services</h3>
                <p>We use Google AdSense to display advertisements. These third-party ad servers may use cookies to personalize content and measure ad performance. You can opt out of personalized advertising by visiting Google's Ads Settings.</p>
                
                <h3>Changes to This Policy</h3>
                <p>We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.</p>
                
                <h3>Contact Us</h3>
                <p>If you have any questions about this Privacy Policy, please contact us through our contact form.</p>
            </div>
            
            <div class="ad-inline">
                Advertisement (300x250)
            </div>
        </div>

        <!-- Contact Us Tab -->
        <div id="contact-tab" class="tab-content">
            <div class="info-page">
                <h2>Contact Us</h2>
                <p>We'd love to hear from you! Whether you have feedback, suggestions, or need support, please don't hesitate to reach out.</p>
                
                <div class="contact-form">
                    <div class="form-group">
                        <label for="name">Your Name</label>
                        <input type="text" id="name" placeholder="Enter your name">
                    </div>
                    
                    <div class="form-group">
                        <label for="email">Email Address</label>
                        <input type="email" id="email" placeholder="Enter your email">
                    </div>
                    
                    <div class="form-group">
                        <label for="subject">Subject</label>
                        <input type="text" id="subject" placeholder="Subject of your message">
                    </div>
                    
                    <div class="form-group">
                        <label for="message">Message</label>
                        <textarea id="message" rows="5" placeholder="Your message here..."></textarea>
                    </div>
                    
                    <button class="submit-btn" id="send-message">Send Message</button>
                </div>
                
                <h3>Other Ways to Reach Us</h3>
                <p>If you prefer, you can also contact us through:</p>
                <ul>
                    <li>Email: support@relaxanddraw.example.com</li>
                    <li>Twitter: @relaxanddraw</li>
                    <li>Feedback form within the application</li>
                </ul>
            </div>
            
            <div class="ad-inline">
                Advertisement (300x250)
            </div>
        </div>
    </div>

    <footer>
        <p>Relax & Draw &copy; 2023 | A Stress Relief Drawing Application | <a href="#" data-tab="privacy">Privacy Policy</a> | <a href="#" data-tab="terms">Terms of Service</a></p>
    </footer>

    <div class="music-control" id="music-control">
        <i class="fas fa-volume-mute"></i>
        <div class="volume-container">
            <span>Volume</span>
            <input type="range" min="0" max="100" value="50" class="volume-slider" id="volume-slider">
        </div>
    </div>

    <div class="notification" id="notification">
        <i class="fas fa-info-circle"></i> <span id="notification-text"></span>
    </div>

    <script>
        // ========== CANVAS SETUP ==========
        const canvas = document.getElementById('drawing-canvas');
        const ctx = canvas.getContext('2d');
        let isDrawing = false;
        let lastX = 0;
        let lastY = 0;
        let currentTool = 'brush';
        let currentColor = '#6d5dfc';
        let brushSize = 5;
        let opacity = 1;
        let history = [];
        let historyStep = -1;
        let currentShape = 'line';
        let startX, startY;
        let uploadedImage = null;
        let isSpraying = false;
        let sprayInterval;
        let selectedSticker = null;
        let stickers = [];
        let isPickingColor = false;

        // Initialize canvas
        function initCanvas() {
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            saveState();
        }

        // Initialize canvas size
        function initCanvasSize() {
            const container = document.querySelector('.canvas-container');
            const maxWidth = container.clientWidth - 40;
            const maxHeight = window.innerHeight * 0.7;
            
            const aspectRatio = canvas.width / canvas.height;
            
            if (maxWidth / aspectRatio <= maxHeight) {
                canvas.style.width = maxWidth + 'px';
                canvas.style.height = (maxWidth / aspectRatio) + 'px';
            } else {
                canvas.style.height = maxHeight + 'px';
                canvas.style.width = (maxHeight * aspectRatio) + 'px';
            }
        }

        // ========== HISTORY MANAGEMENT ==========
        function saveState() {
            if (historyStep < history.length - 1) {
                history = history.slice(0, historyStep + 1);
            }
            
            history.push(canvas.toDataURL());
            historyStep++;
            
            if (history.length > 50) {
                history.shift();
                historyStep--;
            }
            
            localStorage.setItem('drawingAppCanvas', canvas.toDataURL());
        }

        function undo() {
            if (historyStep > 0) {
                historyStep--;
                const img = new Image();
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                };
                img.src = history[historyStep];
            }
        }

        function redo() {
            if (historyStep < history.length - 1) {
                historyStep++;
                const img = new Image();
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                };
                img.src = history[historyStep];
            }
        }

        // ========== DRAWING TOOLS ==========
        function startDrawing(e) {
            if (currentTool === 'text' || currentTool === 'picker') return;
            
            if (selectedSticker) {
                const rect = canvas.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                addSticker(selectedSticker, x, y);
                selectedSticker = null;
                hideStickerCursor();
                document.getElementById('sticker-status').style.display = 'none';
                document.querySelectorAll('.sticker-btn').forEach(btn => btn.classList.remove('active'));
                return;
            }
            
            isDrawing = true;
            [lastX, lastY] = getCoordinates(e);
            
            if (currentTool === 'shape') {
                startX = lastX;
                startY = lastY;
            }
            
            if (currentTool === 'brush' || currentTool === 'eraser') {
                ctx.beginPath();
                ctx.moveTo(lastX, lastY);
            }
            
            if (currentTool === 'spray') {
                isSpraying = true;
                sprayPaint(lastX, lastY);
                sprayInterval = setInterval(() => {
                    if (isSpraying) {
                        sprayPaint(lastX, lastY);
                    }
                }, 50);
            }
            
            if (currentTool === 'fill') {
                floodFill(lastX, lastY, currentColor);
                saveState();
                isDrawing = false;
            }
            
            if (currentTool === 'picker') {
                pickColor(lastX, lastY);
                isDrawing = false;
            }
        }

        function draw(e) {
            if (!isDrawing || currentTool === 'text' || currentTool === 'picker' || currentTool === 'fill') return;
            
            const [x, y] = getCoordinates(e);
            
            if (currentTool === 'brush' || currentTool === 'eraser') {
                ctx.lineTo(x, y);
                ctx.stroke();
            }
            
            if (currentTool === 'spray') {
                lastX = x;
                lastY = y;
            }
            
            if (currentTool === 'shape') {
                const img = new Image();
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                    drawShapePreview(startX, startY, x, y);
                };
                img.src = history[historyStep];
            }
        }

        function stopDrawing(e) {
            if (!isDrawing || currentTool === 'text' || currentTool === 'picker' || currentTool === 'fill') return;
            
            isDrawing = false;
            
            if (currentTool === 'spray') {
                isSpraying = false;
                clearInterval(sprayInterval);
                saveState();
            } else if (currentTool === 'shape') {
                const [x, y] = getCoordinates(e);
                drawShape(startX, startY, x, y);
                saveState();
            } else if (currentTool === 'brush' || currentTool === 'eraser') {
                ctx.closePath();
                saveState();
            }
        }

        // ========== SPECIFIC TOOL FUNCTIONS ==========
        function sprayPaint(x, y) {
            ctx.fillStyle = currentTool === 'eraser' ? 'white' : currentColor;
            ctx.globalAlpha = opacity;
            
            for (let i = 0; i < 10; i++) {
                const radius = brushSize * Math.random();
                const angle = Math.random() * Math.PI * 2;
                const sprayX = x + Math.cos(angle) * brushSize * Math.random();
                const sprayY = y + Math.sin(angle) * brushSize * Math.random();
                
                ctx.beginPath();
                ctx.arc(sprayX, sprayY, radius, 0, Math.PI * 2);
                ctx.fill();
            }
            
            ctx.globalAlpha = 1;
        }

        function floodFill(x, y, fillColor) {
            const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
            const data = imageData.data;
            const startIndex = (y * canvas.width + x) * 4;
            const startColor = {
                r: data[startIndex],
                g: data[startIndex + 1],
                b: data[startIndex + 2],
                a: data[startIndex + 3]
            };
            
            const hexToRgb = (hex) => ({
                r: parseInt(hex.slice(1, 3), 16),
                g: parseInt(hex.slice(3, 5), 16),
                b: parseInt(hex.slice(5, 7), 16)
            });
            
            const fillRgb = hexToRgb(fillColor);
            
            if (startColor.r === fillRgb.r && startColor.g === fillRgb.g && startColor.b === fillRgb.b) {
                return;
            }
            
            const stack = [[x, y]];
            const visited = new Set();
            
            while (stack.length > 0) {
                const [currentX, currentY] = stack.pop();
                const index = (currentY * canvas.width + currentX) * 4;
                
                if (currentX < 0 || currentX >= canvas.width || currentY < 0 || currentY >= canvas.height) {
                    continue;
                }
                
                if (visited.has(`${currentX},${currentY}`)) {
                    continue;
                }
                
                const currentColor = {
                    r: data[index],
                    g: data[index + 1],
                    b: data[index + 2],
                    a: data[index + 3]
                };
                
                const colorMatch = Math.abs(currentColor.r - startColor.r) < 10 &&
                                  Math.abs(currentColor.g - startColor.g) < 10 &&
                                  Math.abs(currentColor.b - startColor.b) < 10;
                
                if (colorMatch) {
                    data[index] = fillRgb.r;
                    data[index + 1] = fillRgb.g;
                    data[index + 2] = fillRgb.b;
                    data[index + 3] = 255;
                    
                    visited.add(`${currentX},${currentY}`);
                    
                    stack.push([currentX + 1, currentY]);
                    stack.push([currentX - 1, currentY]);
                    stack.push([currentX, currentY + 1]);
                    stack.push([currentX, currentY - 1]);
                }
            }
            
            ctx.putImageData(imageData, 0, 0);
        }

        function pickColor(x, y) {
            const imageData = ctx.getImageData(x, y, 1, 1).data;
            const rgbToHex = (r, g, b) => '#' + [r, g, b].map(x => {
                const hex = x.toString(16);
                return hex.length === 1 ? '0' + hex : hex;
            }).join('');
            
            const hexColor = rgbToHex(imageData[0], imageData[1], imageData[2]);
            
            currentColor = hexColor;
            document.getElementById('primary-color').value = hexColor;
            ctx.strokeStyle = currentColor;
            ctx.fillStyle = currentColor;
            
            showNotification(`Color picked: ${hexColor}`);
        }

        // ========== SHAPES ==========
        function drawShapePreview(x1, y1, x2, y2) {
            ctx.save();
            ctx.strokeStyle = currentColor;
            ctx.lineWidth = brushSize;
            ctx.setLineDash([5, 5]);
            ctx.globalAlpha = opacity;
            
            drawShapePath(x1, y1, x2, y2);
            ctx.stroke();
            ctx.restore();
        }

        function drawShape(x1, y1, x2, y2) {
            ctx.save();
            ctx.strokeStyle = currentTool === 'eraser' ? 'white' : currentColor;
            ctx.lineWidth = brushSize;
            ctx.setLineDash([]);
            ctx.globalAlpha = opacity;
            
            drawShapePath(x1, y1, x2, y2);
            ctx.stroke();
            ctx.restore();
        }

        function drawShapePath(x1, y1, x2, y2) {
            switch(currentShape) {
                case 'line':
                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);
                    break;
                case 'rect':
                    ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);
                    break;
                case 'circle':
                    const radius = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    ctx.beginPath();
                    ctx.arc(x1, y1, radius, 0, Math.PI * 2);
                    break;
                case 'triangle':
                    ctx.beginPath();
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y2);
                    ctx.lineTo(x1 * 2 - x2, y2);
                    ctx.closePath();
                    break;
                case 'star':
                    drawStar(x1, y1, 5, brushSize * 3, brushSize * 6);
                    break;
                case 'heart':
                    drawHeart(x1, y1, brushSize * 4);
                    break;
            }
        }

        function drawStar(cx, cy, spikes, outerRadius, innerRadius) {
            let rot = Math.PI / 2 * 3;
            let x = cx;
            let y = cy;
            let step = Math.PI / spikes;

            ctx.beginPath();
            ctx.moveTo(cx, cy - outerRadius);

            for (let i = 0; i < spikes; i++) {
                x = cx + Math.cos(rot) * outerRadius;
                y = cy + Math.sin(rot) * outerRadius;
                ctx.lineTo(x, y);
                rot += step;

                x = cx + Math.cos(rot) * innerRadius;
                y = cy + Math.sin(rot) * innerRadius;
                ctx.lineTo(x, y);
                rot += step;
            }

            ctx.lineTo(cx, cy - outerRadius);
            ctx.closePath();
        }

        function drawHeart(x, y, size) {
            ctx.beginPath();
            const topCurveHeight = size * 0.3;
            ctx.moveTo(x, y + size/3);
            ctx.bezierCurveTo(x, y, x - size/2, y, x - size/2, y + size/3);
            ctx.bezierCurveTo(x - size/2, y + size/2, x, y + size, x, y + size);
            ctx.bezierCurveTo(x, y + size, x + size/2, y + size/2, x + size/2, y + size/3);
            ctx.bezierCurveTo(x + size/2, y, x, y, x, y + size/3);
            ctx.closePath();
        }

        // ========== TEXT TOOL ==========
        function addText() {
            const text = document.getElementById('text-input').value;
            const fontSize = parseInt(document.getElementById('font-size').value);
            
            if (text.trim() === '') {
                showNotification('Please enter some text first.');
                return;
            }
            
            ctx.font = `${fontSize}px Arial`;
            ctx.fillStyle = currentColor;
            ctx.textAlign = 'left';
            ctx.textBaseline = 'top';
            
            const x = canvas.width / 2 - ctx.measureText(text).width / 2;
            const y = canvas.height / 2 - fontSize / 2;
            
            ctx.fillText(text, x, y);
            saveState();
            showNotification('Text added to canvas!');
            
            document.getElementById('text-input').value = '';
        }

        // ========== STICKERS ==========
        function addSticker(sticker, x, y) {
            const stickerElement = document.createElement('div');
            stickerElement.className = 'sticker';
            stickerElement.textContent = sticker;
            stickerElement.style.left = (x - 20) + 'px';
            stickerElement.style.top = (y - 20) + 'px';
            stickerElement.style.color = currentColor;
            stickerElement.style.fontSize = '40px';
            
            let isDragging = false;
            let offsetX, offsetY;
            
            stickerElement.addEventListener('mousedown', (e) => {
                isDragging = true;
                offsetX = e.clientX - stickerElement.getBoundingClientRect().left;
                offsetY = e.clientY - stickerElement.getBoundingClientRect().top;
                stickerElement.style.zIndex = '1000';
                e.stopPropagation();
            });
            
            document.addEventListener('mousemove', (e) => {
                if (isDragging) {
                    const rect = canvas.getBoundingClientRect();
                    const x = e.clientX - offsetX - rect.left;
                    const y = e.clientY - offsetY - rect.top;
                    
                    stickerElement.style.left = x + 'px';
                    stickerElement.style.top = y + 'px';
                }
            });
            
            document.addEventListener('mouseup', () => {
                isDragging = false;
                stickerElement.style.zIndex = '10';
            });
            
            stickerElement.addEventListener('dblclick', () => {
                stickerElement.remove();
                stickers = stickers.filter(s => s !== stickerElement);
            });
            
            document.querySelector('.canvas-container').appendChild(stickerElement);
            stickers.push(stickerElement);
            showNotification('Sticker placed! Double-click to remove.');
        }

        function updateStickerCursor(e) {
            if (!selectedSticker) return;
            
            const stickerCursor = document.getElementById('sticker-cursor');
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left - 20;
            const y = e.clientY - rect.top - 20;
            
            stickerCursor.textContent = selectedSticker;
            stickerCursor.style.left = x + 'px';
            stickerCursor.style.top = y + 'px';
            stickerCursor.style.display = 'block';
            stickerCursor.style.color = currentColor;
        }

        function hideStickerCursor() {
            document.getElementById('sticker-cursor').style.display = 'none';
        }

        // ========== UTILITY FUNCTIONS ==========
        function getCoordinates(e) {
            let x, y;
            
            if (e.type.includes('touch')) {
                x = e.touches[0].clientX - canvas.getBoundingClientRect().left;
                y = e.touches[0].clientY - canvas.getBoundingClientRect().top;
            } else {
                x = e.offsetX;
                y = e.offsetY;
            }
            
            const scaleX = canvas.width / canvas.offsetWidth;
            const scaleY = canvas.height / canvas.offsetHeight;
            
            return [x * scaleX, y * scaleY];
        }

        function showNotification(message, duration = 2000) {
            const notification = document.getElementById('notification');
            const notificationText = document.getElementById('notification-text');
            
            notificationText.textContent = message;
            notification.classList.add('show');
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, duration);
        }

        // ========== TOOL SELECTION ==========
        function setActiveTool(tool) {
            document.querySelectorAll('.tool-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            document.getElementById(`${tool}-tool`).classList.add('active');
            currentTool = tool;
            
            if (tool !== 'sticker') {
                selectedSticker = null;
                hideStickerCursor();
                document.getElementById('sticker-status').style.display = 'none';
                document.querySelectorAll('.sticker-btn').forEach(btn => btn.classList.remove('active'));
            }
            
            const textControls = document.getElementById('text-controls');
            if (tool === 'text') {
                textControls.classList.add('active');
                document.getElementById('text-input').focus();
            } else {
                textControls.classList.remove('active');
            }
            
            switch(tool) {
                case 'brush':
                    canvas.style.cursor = 'crosshair';
                    break;
                case 'eraser':
                    canvas.style.cursor = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'20\' height=\'20\'><circle cx=\'10\' cy=\'10\' r=\'8\' fill=\'white\' stroke=\'black\'/></svg>") 10 10, auto';
                    break;
                case 'spray':
                    canvas.style.cursor = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'24\' height=\'24\'><circle cx=\'12\' cy=\'12\' r=\'10\' fill=\'none\' stroke=\'black\' stroke-width=\'2\'/><circle cx=\'12\' cy=\'12\' r=\'3\' fill=\'black\'/></svg>") 12 12, auto';
                    break;
                case 'fill':
                    canvas.style.cursor = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'24\' height=\'24\'><path d=\'M4 20h16\' stroke=\'black\' stroke-width=\'2\'/><path d=\'M8 12h8\' stroke=\'black\' stroke-width=\'2\'/><path d=\'M6 16h12\' stroke=\'black\' stroke-width=\'2\'/></svg>") 12 12, auto';
                    break;
                case 'picker':
                    canvas.style.cursor = 'url("data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'24\' height=\'24\'><circle cx=\'12\' cy=\'12\' r=\'10\' fill=\'none\' stroke=\'black\' stroke-width=\'2\'/><circle cx=\'18\' cy=\'6\' r=\'2\' fill=\'black\'/></svg>") 12 12, auto';
                    break;
                default:
                    canvas.style.cursor = 'default';
                    break;
            }
        }

        // ========== EVENT LISTENERS ==========
        // Tool selection
        document.getElementById('brush-tool').addEventListener('click', () => setActiveTool('brush'));
        document.getElementById('eraser-tool').addEventListener('click', () => setActiveTool('eraser'));
        document.getElementById('spray-tool').addEventListener('click', () => setActiveTool('spray'));
        document.getElementById('fill-tool').addEventListener('click', () => setActiveTool('fill'));
        document.getElementById('shape-tool').addEventListener('click', () => setActiveTool('shape'));
        document.getElementById('text-tool').addEventListener('click', () => setActiveTool('text'));
        document.getElementById('picker-tool').addEventListener('click', () => setActiveTool('picker'));

        // Shape selection
        document.querySelectorAll('[data-shape]').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.shape-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentShape = btn.getAttribute('data-shape');
            });
        });

        // Sticker selection
        document.querySelectorAll('.sticker-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.sticker-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                selectedSticker = btn.getAttribute('data-sticker');
                document.getElementById('sticker-status').style.display = 'block';
                document.getElementById('sticker-status').innerHTML = 
                    `<i class="fas fa-mouse-pointer"></i> Selected: ${selectedSticker} - Click on canvas to place`;
                showNotification(`Sticker ${selectedSticker} selected. Click on canvas to place it.`);
                canvas.style.cursor = 'crosshair';
            });
        });

        // Text tool
        document.getElementById('add-text-btn').addEventListener('click', addText);
        document.getElementById('text-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') addText();
        });

        // Color and brush settings
        document.getElementById('primary-color').addEventListener('input', (e) => {
            currentColor = e.target.value;
            ctx.strokeStyle = currentColor;
            ctx.fillStyle = currentColor;
        });

        document.getElementById('secondary-color').addEventListener('input', (e) => {
            canvas.style.backgroundColor = e.target.value;
        });

        document.getElementById('brush-size').addEventListener('input', (e) => {
            brushSize = e.target.value;
            document.getElementById('brush-size-value').textContent = `${brushSize}px`;
            ctx.lineWidth = brushSize;
        });

        document.getElementById('opacity').addEventListener('input', (e) => {
            opacity = e.target.value / 100;
            document.getElementById('opacity-value').textContent = `${e.target.value}%`;
            ctx.globalAlpha = opacity;
        });

        // Action buttons
        document.getElementById('undo-btn').addEventListener('click', undo);
        document.getElementById('redo-btn').addEventListener('click', redo);
        document.getElementById('clear-btn').addEventListener('click', () => {
            ctx.fillStyle = document.getElementById('secondary-color').value || 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            stickers.forEach(sticker => sticker.remove());
            stickers = [];
            saveState();
            showNotification('Canvas cleared!');
        });
        document.getElementById('download-btn').addEventListener('click', () => {
            const link = document.createElement('a');
            link.download = 'relax-and-draw.png';
            link.href = canvas.toDataURL('image/png');
            link.click();
            showNotification('Drawing downloaded!');
        });
        document.getElementById('upload-btn').addEventListener('click', () => {
            document.getElementById('image-upload').click();
        });
        document.getElementById('save-btn').addEventListener('click', () => {
            saveState();
            showNotification('Drawing saved successfully!');
        });
        document.getElementById('load-btn').addEventListener('click', () => {
            const savedCanvas = localStorage.getItem('drawingAppCanvas');
            if (savedCanvas) {
                const img = new Image();
                img.onload = function() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.drawImage(img, 0, 0);
                    saveState();
                    showNotification('Drawing loaded successfully!');
                };
                img.src = savedCanvas;
            } else {
                showNotification('No saved drawing found.');
            }
        });

        // Image upload
        document.getElementById('image-upload').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    const img = new Image();
                    img.onload = function() {
                        const scale = Math.min(canvas.width / img.width, canvas.height / img.height);
                        const width = img.width * scale;
                        const height = img.height * scale;
                        const x = (canvas.width - width) / 2;
                        const y = (canvas.height - height) / 2;
                        
                        ctx.drawImage(img, x, y, width, height);
                        saveState();
                        showNotification('Image uploaded successfully!');
                    };
                    img.src = event.target.result;
                };
                reader.readAsDataURL(file);
            }
        });

        // Canvas events
        canvas.addEventListener('mousedown', startDrawing);
        canvas.addEventListener('mousemove', (e) => {
            draw(e);
            updateStickerCursor(e);
        });
        canvas.addEventListener('mouseup', stopDrawing);
        canvas.addEventListener('mouseout', (e) => {
            stopDrawing(e);
            hideStickerCursor();
        });
        canvas.addEventListener('mouseenter', (e) => {
            if (selectedSticker) updateStickerCursor(e);
        });

        // Touch events
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            startDrawing(e);
        });
        canvas.addEventListener('touchmove', (e) => {
            e.preventDefault();
            draw(e);
        });
        canvas.addEventListener('touchend', (e) => {
            e.preventDefault();
            stopDrawing(e);
        });

        // ========== MUSIC CONTROL ==========
        const musicControl = document.getElementById('music-control');
        const volumeSlider = document.getElementById('volume-slider');
        const audio = new Audio();
        
        audio.src = 'https://assets.mixkit.co/music/preview/mixkit-tech-house-vibes-130.mp3';
        audio.loop = true;
        
        let isPlaying = false;
        
        document.body.addEventListener('click', function initAudio() {
            const AudioContext = window.AudioContext || window.webkitAudioContext;
            const audioContext = new AudioContext();
            if (audioContext.state === 'suspended') audioContext.resume();
            document.body.removeEventListener('click', initAudio);
        }, { once: true });
        
        musicControl.addEventListener('click', () => {
            if (!isPlaying) {
                audio.play().catch(e => console.log("Audio play failed"));
                musicControl.classList.add('playing');
                musicControl.querySelector('i').className = 'fas fa-volume-up';
                isPlaying = true;
                showNotification('Music started!');
            } else {
                audio.pause();
                musicControl.classList.remove('playing');
                musicControl.querySelector('i').className = 'fas fa-volume-mute';
                isPlaying = false;
                showNotification('Music paused!');
            }
        });
        
        volumeSlider.addEventListener('input', (e) => {
            audio.volume = e.target.value / 100;
        });

        // ========== TAB NAVIGATION ==========
        document.querySelectorAll('.tab-btn').forEach(button => {
            button.addEventListener('click', () => {
                document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                button.classList.add('active');
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                document.getElementById(button.getAttribute('data-tab') + '-tab').classList.add('active');
            });
        });

        document.querySelectorAll('footer a').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                document.querySelector(`.tab-btn[data-tab="${link.getAttribute('data-tab')}"]`).click();
            });
        });

        // Contact form
        document.getElementById('send-message').addEventListener('click', () => {
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const subject = document.getElementById('subject').value;
            const message = document.getElementById('message').value;
            
            if (!name || !email || !subject || !message) {
                alert('Please fill in all fields before sending your message.');
                return;
            }
            
            alert('Thank you for your message! We will get back to you soon.');
            document.getElementById('name').value = '';
            document.getElementById('email').value = '';
            document.getElementById('subject').value = '';
            document.getElementById('message').value = '';
        });

        // ========== INITIALIZATION ==========
        window.addEventListener('load', () => {
            initCanvas();
            initCanvasSize();
        });
        window.addEventListener('resize', initCanvasSize);

        // Quotes
        const quotes = [
            "Every artist was first an amateur. - Ralph Waldo Emerson",
            "Creativity takes courage. - Henri Matisse",
            "Art washes away from the soul the dust of everyday life. - Pablo Picasso",
            "The purpose of art is washing the dust of daily life off our souls. - Pablo Picasso",
            "Art is not what you see, but what you make others see. - Edgar Degas",
            "Every child is an artist. The problem is how to remain an artist once we grow up. - Pablo Picasso",
            "Art should comfort the disturbed and disturb the comfortable. - Banksy",
            "To create one's own world takes courage. - Georgia O'Keeffe"
        ];

        function showRandomQuote() {
            const randomQuote = quotes[Math.floor(Math.random() * quotes.length)];
            document.getElementById('quote-display').textContent = randomQuote;
        }

        setInterval(showRandomQuote, 30000);
        showRandomQuote();
    </script>
</body>
</html>